#####################__##__attr-tranform__##__#########################
########## /Users/alfnielsen/Code/attr-transform.macro/sandbox/in2.tsx



## Transformed Code ------------------------------------------------------------
## -- jsx-transform.macro (DevMode Transformed)                                 
## -- file: /Users/alfnielsen/Code/attr-transform.macro/sandbox/in2.tsx         
import "../build/macro";
import React, { FC, JSX as RJSX } from "react";
const DD: FC = props => {
  return <div tw="p-3 flex items-center justify-start">
      <div tw="p-1"></div>
    </div>;
};


---- - - - - - -----------------------------------------------------------------


#####################__##__attr-tranform__##__#########################
########## /Users/alfnielsen/Code/attr-transform.macro/sandbox/in1.tsx



## Transformed Code ------------------------------------------------------------
## -- jsx-transform.macro (DevMode Transformed)                                 
## -- file: /Users/alfnielsen/Code/attr-transform.macro/sandbox/in1.tsx         
/**
 * Twin Sandbox (twin-attributes)
 * A place to test the output twin creates.
 * Good for general testing or for developing new features.
 *
 * Getting started
 * 1. Run the script: `npm run dev`
 * 2. Make a change to this file or to a file in the `src` folder
 * 3. Check `sandbox/out.tsx` for the macro output
 */

import "../build/macro";
import React, { FC, JSX as RJSX } from "react";

// Inline tw

interface PaddingPropList {
  p1?: boolean;
  p2?: boolean;
  p3?: boolean;
  p4?: boolean;
  p5?: boolean;
  p6?: boolean;
  p7?: boolean;
  p8?: boolean;
  p9?: boolean;
}
/** p1 - p9 only one is allowed */
type PaddingProp = RequireOnlyOne<PaddingPropList>;

// generic:
/** p1 - p9 only one is allowed */
type RequireOnlyOne<T, Keys extends keyof T = keyof T> = Pick<T, Exclude<keyof T, Keys>> & { [K in Keys]-?: Required<Pick<T, K>> & Partial<Record<Exclude<Keys, K>, undefined>> }[Keys];
type ZeroOrOneProp<T, Keys extends keyof T = keyof T> = T extends Partial<T> ? RequireOnlyOne<T, Keys> : T;

// https://www.typescriptlang.org/docs/handbook/jsx.html
declare global {
  namespace JSX {
    interface IntrinsicElements {
      div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>;
      box: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>;
    }

    // interface ElementAttributesProperty {
    //     p1?: boolean
    //     flex?: boolean
    //     line?: boolean
    // }
    interface IntrinsicAttributes {
      /** tw: "flex" */
      flex?: boolean;
      /** tw: "flex items-center justify-start" */
      line?: boolean;
      /** tw: "p1" */
      p1?: boolean;
      /** tw: "p2" */
      p2?: boolean;
    }
  }
}
type DDProps = PaddingProp & {
  children?: React.ReactNode;
  className?: string;
  tw?: string;
};
const DD: FC<PaddingProp> = props => {
  return <div data-prop="t" {...props} tw="p-3 flex items-center justify-start" />;
};
const d1 = <DD1 tw="p-2 bg-black/25 flex items-center justify-start" data-prop="more" float />;
const d2 = <DD2 tw="p-1 flex items-center justify-start" />;
const d3 = <DD3 />;
const d4 = <DD4 tw="p-1 bg-gray-100" />;
const d5 = <DD5 placeholder="search" />;
const e1 = <ActionGroupRow single title="Database Tables" icon={<DbSqlIcon />} section="database-tables"></ActionGroupRow>;


---- - - - - - -----------------------------------------------------------------


